//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.RailwayService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Trip : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TicketsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WayNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TicketsCount {
            get {
                return this.TicketsCountField;
            }
            set {
                if ((this.TicketsCountField.Equals(value) != true)) {
                    this.TicketsCountField = value;
                    this.RaisePropertyChanged("TicketsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WayNumber {
            get {
                return this.WayNumberField;
            }
            set {
                if ((this.WayNumberField.Equals(value) != true)) {
                    this.WayNumberField = value;
                    this.RaisePropertyChanged("WayNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RailwayService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        Client.RailwayService.CompositeType GetDataUsingDataContract(Client.RailwayService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.RailwayService.CompositeType> GetDataUsingDataContractAsync(Client.RailwayService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTrip", ReplyAction="http://tempuri.org/IService/GetTripResponse")]
        Client.RailwayService.Trip[] GetTrip(string wayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTrip", ReplyAction="http://tempuri.org/IService/GetTripResponse")]
        System.Threading.Tasks.Task<Client.RailwayService.Trip[]> GetTripAsync(string wayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicketsCount", ReplyAction="http://tempuri.org/IService/GetTicketsCountResponse")]
        int GetTicketsCount(string wayName, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicketsCount", ReplyAction="http://tempuri.org/IService/GetTicketsCountResponse")]
        System.Threading.Tasks.Task<int> GetTicketsCountAsync(string wayName, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuyTicketOnTrip", ReplyAction="http://tempuri.org/IService/BuyTicketOnTripResponse")]
        bool BuyTicketOnTrip(string wayName, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuyTicketOnTrip", ReplyAction="http://tempuri.org/IService/BuyTicketOnTripResponse")]
        System.Threading.Tasks.Task<bool> BuyTicketOnTripAsync(string wayName, string time);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.RailwayService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.RailwayService.IService>, Client.RailwayService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Client.RailwayService.CompositeType GetDataUsingDataContract(Client.RailwayService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.RailwayService.CompositeType> GetDataUsingDataContractAsync(Client.RailwayService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public Client.RailwayService.Trip[] GetTrip(string wayName) {
            return base.Channel.GetTrip(wayName);
        }
        
        public System.Threading.Tasks.Task<Client.RailwayService.Trip[]> GetTripAsync(string wayName) {
            return base.Channel.GetTripAsync(wayName);
        }
        
        public int GetTicketsCount(string wayName, string time) {
            return base.Channel.GetTicketsCount(wayName, time);
        }
        
        public System.Threading.Tasks.Task<int> GetTicketsCountAsync(string wayName, string time) {
            return base.Channel.GetTicketsCountAsync(wayName, time);
        }
        
        public bool BuyTicketOnTrip(string wayName, string time) {
            return base.Channel.BuyTicketOnTrip(wayName, time);
        }
        
        public System.Threading.Tasks.Task<bool> BuyTicketOnTripAsync(string wayName, string time) {
            return base.Channel.BuyTicketOnTripAsync(wayName, time);
        }
    }
}
